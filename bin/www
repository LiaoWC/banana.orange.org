// Setup basic express server
var express = require('express');
var app = require('../app');
var path = require('path');
var server = require('http').createServer(app);
var io = require('socket.io')(server);
var port = process.env.PORT || 8080;
var axios = require('axios')
var fs = require('fs')

server.listen(port, () => {
  console.log('Server listening at port %d', port);
});

// Meeting room managing
var rooms = {}

var room_of_socket = {}

var old_rooms = {}

// Chatroom

var numUsers = 0;

rooms['Public'] = {
  room_name: 'Public',
  person_num: 0
}

old_rooms['Project_meeting'] = {
  room_name: 'Project_meeting',
  person_num: 0
}

io.on('connection', (socket) => {
  // closed room
  {
    socket.on('get files', (data) => {
      var old_keys = Object.keys(old_rooms)
      if (old_keys.find(e => e == data.room_name) == undefined) {
        socket.emit('get files not closed', rooms);
        return
      }
      console.log(fs.readdirSync('./savedFiles/'))

      socket.emit('get files ok', {
        files: fs.readdirSync('./savedFiles/')
      })
    });
  }


  // room
  {
    socket.on('enter room', (data) => {
      var old_keys = Object.keys(old_rooms)
      if (rooms[data.room_name] == undefined) {
        socket.emit('enter room failed', rooms);
        return
      }
      if (old_keys.find(e => e == data.room_name) != undefined) {
        socket.emit('enter room closed', rooms);
        return
      }

      console.log(socket.id + " join " + data.room_name)
      socket.join(data.room_name)
      room_of_socket[socket.id] = data.room_name;
      rooms[data.room_name].person_num++;
    });

    socket.on('add room', (data) => {
      if (rooms[data] === undefined) {
        rooms[data] = {
          room_name: data,
          person_num: 0
        }
        socket.emit('add room ok', {
          rooms: rooms,
          old_rooms: old_rooms
        });
        var dir = './savedFiles/' + data;

        if (!fs.existsSync(dir)) {
          fs.mkdirSync(dir);
        }
        // post to line server
        axios.post('https://e464f1497bc9.ngrok.io/response', { 'type': 'meeting', 'content': 'https://banana-orange.herokuapp.com/meeting?room_name=Public' })
          .then((response) => {
            //console.log(response)
          })
          .catch((error) => {
            //console.log(error)
          })
      }
    });

    socket.on('get room', (data) => {
      socket.emit('get room ok', {
        rooms: rooms,
        old_rooms: old_rooms
      });
    });

    socket.on('end room', (data) => {
      var room_name = room_of_socket[socket.id]
      old_rooms[room_of_socket[socket.id]] = rooms[room_of_socket[socket.id]]

      socket.to(room_name).emit('end room ok', {
        username: socket.username
      })
    });
  }

  // chat & whiteboard
  {
    var addedUser = false;

    socket.on('drawing', (data) => {
      socket.to(data.room_name).emit('drawing', data)
      //socket.broadcast.emit('drawing', data)
    });


    // when the client emits 'new message', this listens and executes
    socket.on('new message', (data) => {

      // we tell the client to execute 'new message'
      socket.to(room_of_socket[socket.id]).emit('new message', {
        username: socket.username,
        message: data
      })
      /*
      socket.broadcast.emit('new message', {
        username: socket.username,
        message: data
      });
      */
    });

    // when the client emits 'add user', this listens and executes
    socket.on('add user', (data) => {
      if (addedUser || rooms[room_of_socket[socket.id]] == undefined) return;

      // we store the username in the socket session for this client
      socket.username = data;
      ++numUsers;
      addedUser = true;

      socket.emit('login', {
        numUsers: rooms[room_of_socket[socket.id]].person_num
      });
      // echo globally (all clients) that a person has connected
      socket.to(room_of_socket[socket.id]).emit('user joined', {
        username: socket.username,
        numUsers: rooms[room_of_socket[socket.id]].person_num
      })
      /*
      socket.broadcast.emit('user joined', {
        username: socket.username,
        numUsers: numUsers
      });
      */
    });

    // when the client emits 'typing', we broadcast it to others
    socket.on('typing', () => {
      socket.to(room_of_socket[socket.id]).emit('typing', {
        username: socket.username,
      })
      /*
      socket.broadcast.emit('typing', {
        username: socket.username
      });
      */
    });

    // when the client emits 'stop typing', we broadcast it to others
    socket.on('stop typing', () => {
      socket.to(room_of_socket[socket.id]).emit('stop typing', {
        username: socket.username,
      })
      /*
      socket.broadcast.emit('stop typing', {
        username: socket.username
      });
      */
    });

    // when the user disconnects.. perform this
    socket.on('disconnect', () => {
      if (addedUser) {
        --numUsers;
        rooms[room_of_socket[socket.id]].person_num--

        // echo globally that this client has left
        socket.broadcast.emit('user left', {
          username: socket.username,
          numUsers: rooms[room_of_socket[socket.id]].person_num
        });
      }
    });
  }


});

